// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_id")
  @@index([userId], name: "idx_user_id")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime? @map("email_verified")
  role          Int       @default(0)
  Account       Account[]
  Session       Session[]
  Trips         Trip[]
}

model Trip {
  id            Int         @id @default(autoincrement())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  departure     Location    @relation("DepartureLocation", fields: [departureId], references: [id])
  departureId   Int
  destination   Location    @relation("DestinationLocation", fields: [destinationId], references: [id])
  destinationId Int
  transports    Transport[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([departureId])
  @@index([destinationId])
}

model Location {
  id         Int    @id @default(autoincrement())
  name       String
  latitude   Float
  longitude  Float
  departures Trip[] @relation("DepartureLocation")
  arrivals   Trip[] @relation("DestinationLocation")
}

model Transport {
  id            Int      @id @default(autoincrement())
  tripId        Int
  trip          Trip     @relation(fields: [tripId], references: [id])
  type          String
  price         Float
  departureTime DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tripId])
}
