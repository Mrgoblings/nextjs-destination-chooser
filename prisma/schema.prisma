// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_id")
  @@index([userId], name: "idx_user_id")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime? @map("email_verified")
  role          Int       @default(0)
  Account       Account[]
  Session       Session[]
  Page          Page[]
}

model Page {
  id            Int         @id @default(autoincrement())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  path          String      @unique

  Title         Title[]
  Heading      Heading[]

  @@index([userId])
}

model Title {
  id         Int    @id @default(autoincrement())
  content    String
  createdAt  DateTime    @default(now())
  pageId     Int
  page     Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
}

model Heading {
  id         Int    @id @default(autoincrement())
  content    String
  createdAt  DateTime    @default(now())
  pageId     Int
  page     Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  BodyContent   BodyContent[]

  @@index([pageId])
}

model BodyContent {
  id         Int    @id @default(autoincrement())
  content    String
  createdAt  DateTime    @default(now())
  headingId     Int
  heading     Heading        @relation(fields: [headingId], references: [id], onDelete: Cascade)

  @@index([headingId])
}
